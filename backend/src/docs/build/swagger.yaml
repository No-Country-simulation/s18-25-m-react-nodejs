openapi: 3.0.0
info:
  title: Developer Social Network API
  version: 1.0.0
  description: Documentación de la API usando Swagger
servers:
  - url: 'https://mrmolanodev.site/api/v1'
    description: Production server
  - url: 'http://localhost:3000/api/v1'
    description: Sandbox server (uses test data)
tags:
  - name: Posts
    description: API para gestionar posts
  - name: Project
    description: API para gestionar projects
  - name: Authentication
    description: API para autenticar usuarios
  - name: Users
    description: API para gestionar usuarios
  - name: Technologies
    description: API para gestionar tecnologias
  - name: Comment
    description: API para gestionar comentarios
paths:
  /post:
    get:
      summary: Obtiene todos los posts
      tags:
        - Posts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de posts a devolver
          required: false
          description: Limita el número de posts devueltos (por defecto devuelve todos)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de posts a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' posts (para paginación)
        - in: query
          name: search
          schema:
            type: string
            description: Buscar posts por el título
          required: false
          description: Buscar posts cuyo título contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: Lista de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                - id: '1'
                  title: Primer post
                  content: Contenido del primer post
                  user: '12345'
                  technologies:
                    - name: react
                      color: '#ffffff'
                    - name: express
                      color: '#000000'
                  images:
                    - id: 1
                      url: 'https://image-url'
                      alt: tecno image
                      created_at: '2024-10-08T22:28:58.981Z'
                    - id: 2
                      url: 'https://image-url'
                      alt: tecno image
                      created_at: '2024-10-08T22:28:58.981Z'
                  likes:
                    - null
                    - id: '2'
                      title: Segundo post
                      content: Contenido del segundo post
                      user: '67890'
                      technologies:
                        - name: nextjs
                          color: '#bbbbbb'
                      images:
                        - id: 3
                          url: 'https://image-url'
                          alt: tecno image
                          created_at: '2024-10-08T22:28:58.981Z'
    post:
      summary: Crea un nuevo post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                technologies:
                  type: array
                  items:
                    type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
            example:
              title: Mi primer post
              content: Este es el contenido de mi primer post
              technologies:
                - react
                - nextjs
              images:
                - image-1.png
                - image-2.png
      responses:
        '201':
          description: Post creado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer post
                content: Este es el contenido de mi primer post
                user: 12345
        '401':
          description: Acceso denegado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Permisos insuficientes para crear un nuevo post
  '/post/{id}':
    get:
      summary: Obtiene un post por ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del post
          schema:
            type: string
      responses:
        '200':
          description: Post encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer post
                content: Este es el contenido de mi primer post
                technologies:
                  - name: nextjs
                    color: '#bbbbbb'
                images:
                  - id: 1
                    url: 'https://image-url'
                    alt: tecno image
                    created_at: '2024-10-08T22:28:58.981Z'
                  - id: 2
                    url: 'https://image-url'
                    alt: tecno image
                    created_at: '2024-10-08T22:28:58.981Z'
                user:
                  id: 1
                  name: username
                  email: email@gmail.com
        '404':
          description: Post no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: post no encontrado
    delete:
      summary: Elimina un post por ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del post
          schema:
            type: string
      responses:
        '204':
          description: Post eliminado
        '404':
          description: Post no encontrado
    put:
      summary: Modifica un post ya existente
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                content:
                  type: string
                user:
                  type: number
                technologies:
                  type: array
                  items:
                    $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                      url:
                        type: string
                      alt:
                        type: string
                      created_at:
                        type: string
            example:
              title: Mi primer post
              content: Este es el contenido de mi primer post
              user: '12345'
      responses:
        '201':
          description: Post modificado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer post
                content: Este es el contenido de mi primer post
                user: '12345'
  '/post/user/{userid}':
    get:
      summary: Obtiene todos los posts asociados a un usuario
      tags:
        - Posts
      parameters:
        - in: path
          name: userid
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: 1
                name: Martin
                email: email@gmail.com
                posts:
                  - id: '1'
                    title: Primer post
                    content: Contenido del primer post
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  /project:
    post:
      summary: Crea un nuevo proyecto
      tags:
        - Project
      parameters:
        - name: user_id
          in: cookie
          required: true
          schema:
            type: number
          description: The user ID is sent via cookie for authentication or identification purposes.
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: E-commerce
              description: Descubri una nueva forma de hacer compras online
              role: frontend
              url: 'https://github-pages.com'
              technologies:
                - astro
                - react
                - nextjs
              collaborators:
                - Martin
                - Sofia
                - Marcos
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                role:
                  type: string
                url:
                  type: string
                collaborators:
                  type: string
      responses:
        '201':
          description: Proyecto creado
    get:
      summary: Obtiene todos los proyectos
      tags:
        - Project
      responses:
        '200':
          description: Lista de proyectos
  '/project/{id}':
    get:
      summary: Obtiene un proyecto por ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      responses:
        '200':
          description: Proyecto encontrado
        '404':
          description: Proyecto no encontrado
    put:
      summary: Actualiza un proyecto por ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Proyecto actualizado
        '404':
          description: Proyecto no encontrado
    delete:
      summary: Elimina un proyecto por ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      responses:
        '204':
          description: Proyecto eliminado
        '404':
          description: Proyecto no encontrado
  /technology:
    get:
      summary: Obtiene todos las tecnologias
      tags:
        - Technologies
      responses:
        '200':
          description: Lista de las tecnologias
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
              example:
                - name: react
                  color: '#ffffff'
                - name: express
                  color: '#000000'
    post:
      summary: Crea una nueva tecnologia
      tags:
        - Technologies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            example:
              name: angular
      responses:
        '201':
          description: tecnologia creada
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  color:
                    type: string
              example:
                name: angular
                color: '#ffffff'
  '/technology/{name}':
    get:
      summary: Obtiene una tecnologia por nombre
      tags:
        - Technologies
      parameters:
        - in: path
          name: name
          required: true
          description: Nombre de la tecnologia
          schema:
            type: string
      responses:
        '200':
          description: tecnologia encontrada
          content:
            application/json:
              schema:
                $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
              example:
                name: react
                color: '#ffffff'
        '404':
          description: tecnologia no encontrada
    delete:
      summary: Elimina una tecnologia por nombre
      tags:
        - Technologies
      parameters:
        - in: path
          name: name
          required: true
          description: nombre de la tecnologia
          schema:
            type: string
      responses:
        '204':
          description: tecnologia eliminada
        '404':
          description: tecnologia no encontrada
    put:
      summary: Modifica una tecnologia ya existente
      tags:
        - Technologies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1technology/post/requestBody/content/application~1json/schema'
            example:
              name: react
              color: '#ffffff'
      responses:
        '201':
          description: tecnologia modificada
          content:
            application/json:
              schema:
                $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
              example:
                name: react
                color: '#ffffff'
  /user:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                - id: 1
                  name: Martin
                  email: email@gmail.com
                  social_networks:
                    id: 1
                    gitlab: 'https://example.com'
                    twitter: 'https://example.com'
                    instagram: 'https://example.com'
                  posts:
                    - id: '1'
                      title: Primer post
                      content: Contenido del primer post
                - id: 2
                  name: Sofia
                  email: email@gmail.com
                  social_networks:
                    id: 2
                    facebook: 'https://example.com'
                  posts:
                    - id: '1'
                      title: Primer post
                      content: Contenido del primer post
                    - id: '2'
                      title: Segundo post
                      content: Contenido del segundo post
  '/user/{id}':
    get:
      summary: Obtiene un usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: 1
                name: Martin
                email: email@gmail.com
                social_networks:
                  id: 1
                  gitlab: 'https://example.com'
                  twitter: 'https://example.com'
                  instagram: 'https://example.com'
                posts:
                  - id: '1'
                    title: Primer post
                    content: Contenido del primer post
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
    delete:
      summary: Elimina un usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '204':
          description: usuario eliminado
        '404':
          description: usuario no encontrado
    put:
      summary: Modifica un usuario ya existente
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
                email:
                  type: string
                password:
                  type: number
                social_networks:
                  type: object
                  properties:
                    id:
                      type: number
                    github:
                      type: string
                    gitlab:
                      type: string
                    twitter:
                      type: string
                    instagram:
                      type: string
                    facebook:
                      type: string
                    linkedin:
                      type: string
                posts:
                  type: array
                  items:
                    $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
            example:
              title: Mi primer usuario
              content: Este es el contenido de mi primer usuario
              user: '12345'
      responses:
        '201':
          description: usuario modificado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer usuario
                content: Este es el contenido de mi primer usuario
                user: '12345'
  '/user/{id}/followers':
    get:
      summary: Obtiene todos los usuarios que siguen al usuario cliente
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de usuarios a devolver
          required: false
          description: Limita el número de usuarios devueltos
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de usuarios a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' usuarios
        - in: query
          name: search
          schema:
            type: string
            description: Buscar usuarios por el nombre
          required: false
          description: Buscar usuarios cuyo nombre contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                followers:
                  - id: 1
                    name: Martin
                    email: email@gmail.com
                  - id: 2
                    name: Sofia
                    email: email@gmail.com
                currentPage: 1
                totalUsers: 10
                totalPages: 2
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/user/{id}/followed':
    get:
      summary: Obtiene todos los usuarios a los que sigue el usuario cliente
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de usuarios a devolver
          required: false
          description: Limita el número de usuarios devueltos
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de usuarios a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' usuarios
        - in: query
          name: search
          schema:
            type: string
            description: Buscar usuarios por el nombre
          required: false
          description: Buscar usuarios cuyo nombre contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                followers:
                  - id: 1
                    name: Martin
                    email: email@gmail.com
                  - id: 2
                    name: Sofia
                    email: email@gmail.com
                currentPage: 1
                totalUsers: 10
                totalPages: 2
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  /comment:
    post:
      summary: Crea un nuevo comentario
      tags:
        - Comment
      parameters:
        - name: user_id
          in: cookie
          required: true
          schema:
            type: number
          description: The user ID is sent via cookie for authentication or identification purposes.
        - name: post_id
          in: path
          required: true
          description: ID del post
      requestBody:
        required: true
        content:
          application/json:
            example:
              content: Este es un nuevo comentario
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          description: tecnologia creada
          content:
            application/json:
              example:
                message: comentario creado exitosamente
    get:
      summary: Obtiene todos los comentarios
      tags:
        - Comment
      responses:
        '200':
          description: Lista de comentarios
  '/comment/{id}':
    get:
      summary: Obtiene un comment por ID
      tags:
        - Comment
      parameters:
        - in: path
          name: id
          required: true
          description: ID del comment
      responses:
        '200':
          description: Proyecto encontrado
        '404':
          description: Proyecto no encontrado
    put:
      summary: Actualiza un comment por ID
      tags:
        - Comment
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                content:
                  type: string
                user_id:
                  type: number
                post_id:
                  type: number
                created_at:
                  type: date
      responses:
        '200':
          description: comentario actualizado
        '404':
          description: comentario no encontrado
    delete:
      summary: Elimina un comentario por ID
      tags:
        - Comment
      parameters:
        - in: path
          name: id
          required: true
          description: ID del comentario
      responses:
        '204':
          description: comentario eliminado
        '404':
          description: comentario no encontrado
  /auth/register:
    post:
      summary: Registra un nuevo usuario
      tags:
        - Authentication
      responses:
        '201':
          description: Usuario registrado exitosamente
        '400':
          description: Error en la petición
  /auth/login:
    $ref: '#/paths/~1auth~1me'
  /auth/me:
    get:
      summary: Autenticar usuario y generar token
      tags:
        - Authentication
      responses:
        '200':
          description: Login exitoso
        '401':
          description: Error de autenticación
  '/like/user/{userid}':
    get:
      summary: Obtiene todos los Like asociados a un usuario
      tags:
        - Like
      parameters:
        - in: path
          name: userid
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: 1
                post: '1'
                created_at: '2024-10-16'
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
